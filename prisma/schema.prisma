datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  unidades      Unidade[] // Adicione esta linha para definir a relação com Unidade
  empresas      Empresa[] @relation("UserToEmpresa") // Adicione esta linha e nomeie a relação
}

model Tecnico {
  id     String  @id @default(cuid())
  name   String?
  image  String?
  number String
  type   String
}

model Empresa {
  id                Int       @id @default(autoincrement())
  empresa           String
  cnpj              String
  razao             String?
  inscricaoEstadual String?
  ramo              String
  enderecoSede      String[]
  contatos          String[]
  email             String[]
  unidades          Unidade[] // Adicione esta linha para definir a relação com Unidade
  users             User[]    @relation("UserToEmpresa") // Adicione esta linha e nomeie a relação

  @@unique([cnpj])
}

model Unidade {
  id                Int      @id @default(autoincrement())
  nome              String
  senha             String
  local             String
  responsavel       String
  enderecoComercial String[]
  contatos          String[]
  email             String

  userId String // Adicione a referência ao usuário que possui esta unidade
  user   User   @relation(fields: [userId], references: [id])

  empresaId Int? // Adicione uma referência à Empresa à qual esta Unidade pertence
  empresa   Empresa? @relation(fields: [empresaId], references: [id])

  @@unique([userId, nome])
}
